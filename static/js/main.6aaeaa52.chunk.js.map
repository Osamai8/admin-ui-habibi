{"version":3,"sources":["components/Input.js","components/Table.js","components/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["Input","searchUser","TextField","id","label","variant","onChange","e","style","display","justifyContent","margin","EnhancedTable","currentUsers","deleteUser","selected","setSelected","deleteSelectedHandler","useState","setNewUsers","name","email","role","savedUser","setSavedUser","updateHandler","key","value","map","user","Box","sx","width","Paper","mb","Toolbar","pl","sm","pr","xs","length","bgcolor","theme","alpha","palette","primary","main","action","activatedOpacity","Typography","flex","color","component","Tooltip","title","IconButton","onClick","TableContainer","Table","minWidth","aria-labelledby","size","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","event","target","newSelecteds","concat","inputProps","align","TableBody","index","isItemSelected","indexOf","labelId","hover","aria-checked","tabIndex","selectedIndex","newSelected","slice","handleClick","scope","type","editStatus","placeholder","onInput","className","data","saveUserHandler","cancelEditingHandler","editUser","textAlign","PaginationControlled","users","currentPage","setCurrentPage","rouNum","Stack","spacing","Pagination","count","Math","round","page","showFirstButton","showLastButton","App","setUsers","usersPerPage","setSearchInput","useEffect","a","axios","get","response","fetchUsers","indexOfLastUser","indexofFirstUser","filteredUsers","filter","toLowerCase","includes","selectedUserId","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6aaeaa52.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { TextField } from \"@mui/material\";\r\n\r\nconst Input = ({ searchUser }) => {\r\n    return (\r\n        <div>\r\n            <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"Search User..\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => searchUser(e)}\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    margin: \"2rem 5rem 1rem 2rem\"\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import React, { useState } from \"react\";\r\nimport { alpha } from \"@mui/material/styles\";\r\nimport {\r\n    Box,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Toolbar,\r\n    Typography,\r\n    Paper,\r\n    Checkbox,\r\n    IconButton,\r\n    Tooltip\r\n} from \"@mui/material\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport SupervisedUserCircleIcon from \"@mui/icons-material/SupervisedUserCircle\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport SaveIcon from \"@mui/icons-material/Save\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\n\r\nexport default function EnhancedTable({\r\n    currentUsers,\r\n    deleteUser,\r\n    selected,\r\n    setSelected,\r\n    deleteSelectedHandler\r\n}) {\r\n    const [newUsers, setNewUsers] = useState([]);\r\n    const [savedUser, setSavedUser] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        role: \"\"\r\n    });\r\n\r\n    // SELECT ALL USERS ON THE PAGE\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = currentUsers.map((user) => user.name);\r\n            setSelected(newSelecteds);\r\n            return currentUsers.map((user) => selected.concat(user));\r\n        }\r\n        setSelected([]);\r\n    };\r\n    // SELECT USERS\r\n    const handleClick = (name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1)\r\n            );\r\n        }\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n    // UPDATE USER\r\n    const updateHandler = (id, key, value) => {\r\n        currentUsers.map((user) => {\r\n            if (user.id === id) {\r\n                setSavedUser({ ...savedUser, [key]: value });\r\n            }\r\n        });\r\n    };\r\n\r\n    // EDIT USER\r\n    const editUser = (id) => {\r\n        let data = currentUsers.map((user) => {\r\n            if (user.id === id) {\r\n                user.editStatus = true;\r\n            }\r\n            return user;\r\n        });\r\n        setNewUsers(data);\r\n    };\r\n\r\n    // SAVE USER NEW DATA\r\n    const saveUserHandler = (id) => {\r\n        let data = currentUsers.map((user) => {\r\n            if (user.id === id) {\r\n                user.name = savedUser.name ? savedUser.name : user.name;\r\n                user.email = savedUser.email ? savedUser.email : user.email;\r\n                user.role = savedUser.role ? savedUser.role : user.role;\r\n                user.editStatus = false;\r\n            }\r\n            return user;\r\n        });\r\n        setSavedUser({ name: \"\", email: \"\", role: \"\" });\r\n        setNewUsers(data);\r\n    };\r\n\r\n    // CANCEL EDITING USER\r\n    const cancelEditingHandler = (id) => {\r\n        let data = currentUsers.map((user) => {\r\n            if (user.id === id) {\r\n                user.editStatus = false;\r\n            }\r\n            return user;\r\n        });\r\n        setSavedUser({\r\n            name: \"\",\r\n            email: \"\",\r\n            role: \"\"\r\n        });\r\n        setNewUsers(data);\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ width: \"100%\" }}>\r\n            <Paper sx={{ width: \"100%\", mb: 2 }}>\r\n                <Toolbar\r\n                    sx={{\r\n                        pl: { sm: 2 },\r\n                        pr: { xs: 1, sm: 1 },\r\n                        ...(selected.length > 0 && {\r\n                            bgcolor: (theme) =>\r\n                                alpha(\r\n                                    theme.palette.primary.main,\r\n                                    theme.palette.action.activatedOpacity\r\n                                )\r\n                        })\r\n                    }}\r\n                >\r\n                    {selected.length > 0 ? (\r\n                        <Typography\r\n                            sx={{ flex: \"1 1 100%\" }}\r\n                            color=\"inherit\"\r\n                            variant=\"subtitle1\"\r\n                            component=\"div\"\r\n                        >\r\n                            {selected.length} selected\r\n                        </Typography>\r\n                    ) : (\r\n                        <Typography\r\n                            sx={{ flex: \"1 1 100%\" }}\r\n                            variant=\"h6\"\r\n                            id=\"tableTitle\"\r\n                            component=\"div\"\r\n                        >\r\n                            Admin UI\r\n                        </Typography>\r\n                    )}\r\n\r\n                    {selected.length > 0 ? (\r\n                        <Tooltip title=\"Delete\">\r\n                            <IconButton onClick={() => deleteSelectedHandler()}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    ) : (\r\n                        <Tooltip title=\"Admin\">\r\n                            <IconButton>\r\n                                <SupervisedUserCircleIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    )}\r\n                </Toolbar>\r\n\r\n                <TableContainer>\r\n                    <Table\r\n                        sx={{ minWidth: 750 }}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size=\"small\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell padding=\"checkbox\">\r\n                                    <Checkbox\r\n                                        color=\"primary\"\r\n                                        indeterminate={\r\n                                            selected.length > 0 &&\r\n                                            selected.length < currentUsers.length\r\n                                        }\r\n                                        checked={\r\n                                            currentUsers.length > 0 &&\r\n                                            selected.length === currentUsers.length\r\n                                        }\r\n                                        onChange={handleSelectAllClick}\r\n                                        inputProps={{\r\n                                            \"aria-label\": \"select all\"\r\n                                        }}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">Name</TableCell>\r\n                                <TableCell align=\"left\">Email</TableCell>\r\n                                <TableCell align=\"left\">Role</TableCell>\r\n                                <TableCell align=\"center\">Edit</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n\r\n                        <TableBody>\r\n                            {currentUsers.length > 0 ? (\r\n                                currentUsers.map((user, index) => {\r\n                                    const isItemSelected = isSelected(user.name);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={user.name}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    color=\"primary\"\r\n                                                    checked={isItemSelected}\r\n                                                    onClick={() => handleClick(user.name)}\r\n                                                    inputProps={{\r\n                                                        \"aria-labelledby\": labelId\r\n                                                    }}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                component=\"th\"\r\n                                                id={labelId}\r\n                                                scope=\"row\"\r\n                                                padding=\"none\"\r\n                                            >\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    value={`${user.editStatus ? savedUser.name : user.name\r\n                                                        }`}\r\n                                                    placeholder={`${user.editStatus ? user.name : \"\"}`}\r\n                                                    onInput={(e) =>\r\n                                                        updateHandler(user.id, \"name\", e.target.value)\r\n                                                    }\r\n                                                    className={` ${user.editStatus ? \"editable\" : \"non-editable\"\r\n                                                        }`}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">\r\n                                                <input\r\n                                                    type=\"email\"\r\n                                                    value={`${user.editStatus ? savedUser.email : user.email\r\n                                                        }`}\r\n                                                    placeholder={`${user.editStatus ? user.email : \"\"}`}\r\n                                                    onInput={(e) =>\r\n                                                        updateHandler(user.id, \"email\", e.target.value)\r\n                                                    }\r\n                                                    className={`non-editable ${user.editStatus ? \"editable\" : \"\"\r\n                                                        }`}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    value={`${user.editStatus ? savedUser.role : user.role\r\n                                                        }`}\r\n                                                    placeholder={`${user.editStatus ? user.role : \"\"}`}\r\n                                                    onInput={(e) =>\r\n                                                        updateHandler(user.id, \"role\", e.target.value)\r\n                                                    }\r\n                                                    className={` ${user.editStatus ? \"editable\" : \"non-editable\"\r\n                                                        }`}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                {user.editStatus ? (\r\n                                                    <>\r\n                                                        <IconButton\r\n                                                            onClick={() => saveUserHandler(user.id)}\r\n                                                        >\r\n                                                            <SaveIcon />\r\n                                                        </IconButton>\r\n                                                        <IconButton\r\n                                                            onClick={() => cancelEditingHandler(user.id)}\r\n                                                        >\r\n                                                            <CloseIcon style={{ color: \"red\" }} />\r\n                                                        </IconButton>\r\n                                                    </>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <IconButton onClick={() => editUser(user.id)}>\r\n                                                            <EditIcon />\r\n                                                        </IconButton>\r\n                                                        <IconButton onClick={() => deleteUser(user.id)}>\r\n                                                            <DeleteIcon style={{ color: \"red\" }} />\r\n                                                        </IconButton>\r\n                                                    </>\r\n                                                )}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })\r\n                                // {/* </TableBody> */}\r\n                            ) : (\r\n                                // {/* <TableBody>  */}\r\n                                <>\r\n                                    <TableCell></TableCell>\r\n                                    <TableCell></TableCell>\r\n                                    <TableCell>\r\n                                        <h1\r\n                                            style={{\r\n                                                margin: \"2rem\",\r\n                                                textAlign: \"center\"\r\n                                            }}\r\n                                        >\r\n                                            NO USER TO\r\n                                            <br /> DISPLAY\r\n                                        </h1>\r\n                                    </TableCell>\r\n                                </>\r\n                            )}\r\n                        </TableBody>\r\n\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        </Box>\r\n    );\r\n}\r\n","import * as React from \"react\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nconst PaginationControlled = ({ users, currentPage, setCurrentPage }) => {\r\n    const rouNum = users.length / 10;\r\n\r\n    const handleChange = (e, value) => {\r\n        setCurrentPage(value);\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2}>\r\n            <Pagination\r\n                count={Math.round(rouNum)}\r\n                page={currentPage}\r\n                showFirstButton\r\n                showLastButton\r\n                onChange={handleChange}\r\n                style={{ display: \"flex\", justifyContent: \"center\", margin: \"3rem 0\" }}\r\n            />\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default PaginationControlled;\r\n","import React, { useEffect, useState } from \"react\";\nimport Input from \"./components/Input\";\nimport EnhancedTable from \"./components/Table\";\nimport PaginationControlled from \"./components/Pagination\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  // const [isLoading, setIsLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [usersPerPage] = useState(10);\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [selected, setSelected] = useState([]);\n  // const [newUsers, setNewUsers] = useState([]);\n\n  // FETCH USERS\n  useEffect(() => {\n    const fetchUsers = async () => {\n      // setIsLoading(true);\n      const response = await axios.get(\n        `https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json`\n      );\n      setUsers(response.data);\n      // setIsLoading(false);\n    };\n    fetchUsers();\n    //\n  }, []);\n\n  // SEARCH USER\n  const searchUser = (e) => {\n    setSearchInput(e.target.value);\n    let filteredUsers = users.filter((user) => {\n      return (\n        user.name.toLowerCase().includes(e.target.value.toLowerCase()) ||\n        user.role.toLowerCase().includes(e.target.value.toLowerCase()) ||\n        user.email.toLowerCase().includes(e.target.value.toLowerCase())\n      );\n    });\n    setUsers(filteredUsers);\n  };\n\n  // DELETE USER\n  const deleteUser = (id) => {\n    setUsers(users.filter((user) => user.id !== id));\n  };\n\n  // DELETE SELECTED USERS\n  const deleteSelectedHandler = () => {\n    let selectedUserId = selected.map((user) => user);\n    const data = users.filter((item) => !selectedUserId.includes(item.name));\n    setUsers(data);\n    setSelected([]);\n  };\n\n  // USERS PER PAGE\n  const indexOfLastUser = currentPage * usersPerPage; //1*10 =10:   2*10=20:....\n  const indexofFirstUser = indexOfLastUser - usersPerPage; //10-10=0: 20-10=10:....\n  // const currentUsers = users.slice(indexOfLastUser, indexofFirstUser);\n  let currentUsers = users.slice(indexofFirstUser, indexOfLastUser); //0,10  : 10,20:....\n\n  return (\n    <div>\n      <Input searchUser={searchUser} />\n      <EnhancedTable\n        deleteSelectedHandler={deleteSelectedHandler}\n        currentUsers={currentUsers}\n        currentPage={currentPage}\n        usersPerPage={usersPerPage}\n        deleteUser={deleteUser}\n        // setUsers={setUsers}\n        // users={users}\n        selected={selected}\n        setSelected={setSelected}\n      // setNewUsers={setNewUsers}\n      />\n      <PaginationControlled\n        users={users}\n        currentPage={currentPage}\n        setCurrentPage={setCurrentPage}\n      />\n    </div>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}